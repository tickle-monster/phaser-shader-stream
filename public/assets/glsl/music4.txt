//https://www.shadertoy.com/view/4dsBzj

#ifdef GL_ES
precision highp float;
#endif

// glslsandbox uniforms
uniform float time;
uniform vec2 resolution;

in vec2 fragCoord;
out vec4 fragOutput;

// shadertoy globals
#define iTime time
#define iResolution resolution

uniform float     iChannelTime[4];
uniform float     iBlockOffset; 
uniform vec4      iDate;
uniform float     iSampleRate;
uniform vec3      iChannelResolution[4];
uniform sampler2D iChannel0;

//parent: https://www.shadertoy.com/view/ldXBzj 
//self:   https://www.shadertoy.com/view/4dsBzj

//i keep confusing these 2 labels all the time
#define pow2(a) exp2(a)
#define sat(a) clamp(a,0.,1.)


//arp = Arpeggiator, = chord with offset over time, can overlap or not.
// https://en.wikipedia.org/wiki/Arpeggio   is common for string instruments.
//
//https://www.shadertoy.com/view/4ssfzj
//emulates a whole xm-chip, and xm-sequencer.
#define PHI_INC(cnt, val)cnt< 0.0?0.0:exp2(float(val)/12.0)*clamp(cnt, 0.0, 1.0), cnt -= 1.0
#define PHI_REP(cnt, val)cnt< 0.0?0.0:exp2(float(val)/12.0)*max(cnt, 0.0)
float arpeggio3(float p, int d0, int d1, int d2){
    float phi = 0.0;
    float mp = mod(p, 3.0);
    float cp = floor(p / 3.0);
    phi += PHI_INC(mp, d0);
    phi += PHI_INC(mp, d1);
    phi += PHI_INC(mp, d2);
    float f0 = exp2(float(d0) / 12.0);
    float f1 = exp2(float(d1) / 12.0);
    float f2 = exp2(float(d2) / 12.0);
    phi += (f0 + f1 + f2) * cp;
    return phi;}
//https://www.shadertoy.com/view/XlBGz3

//this is a maess of namespace conflicts 
//...and very different approaches to very similar things.
//just look at all the ways they define a rotation:
//which leads to my conclusion:
//most people have no clue what they are doing,
//...just by looking at their low efficiency.

//*exp(-3.0*time);//fadeout over time
#define pi2 6.283185307179586476925286766559
#define CON pi2
#define TWOPI pi2
#define PI2 pi2
#define TAU pi2
#define pi 3.1415926535897932384626433832795
#define PI pi
//edgy, and i assume LOW precision, due to doing a mult.
//#define pi radians(180.)
//#define pi2 radians(360.)
//edgy, highest precision for complex transforms 
//...or if compiler insists on 64 or 128 bit float.
//#define pi acos(-1.)
//#define pi2 pi*2.
//exp(i*pi2)=0.; i*i=-1.; should be utilized to define pi2=6.28...
//above is eulers identity, with pi*2, going "full rotation"



float si(float i){return sin(fract(i)* pi*2.); }
//clamped siene sounds more like a metallic flute if(with overtones)
float csi(float i){return clamp(si(i),-.707,.707); }             
float saw(float i){return fract(i)*2.-1.;}
float sq(float i){return mix(0.,1.,step(fract(i),.5));}
float noise(float i){return fract(sin(i*.011753)*122.3762)*2.-1.;}
//(https://www.shadertoy.com/view/4sSSWz)

//organ with soft overtones
float organ(float t,int k){if(k<1||k>=0xC0)return 0.;//null key
 float f=27.5*pow(2.,float(k)/12.),r=0.;t*=f;
 for(int i = 1;i<8;i++){
  r+=csi(float(i)*t)*pow(.6,float(i));}
 //*pow(.6,float(i)) diminishes amplitude exponentially for each overtone.
 r*=(1.+si(t*10.)/8.);
 return r*5.*inversesqrt(f);}//https://www.shadertoy.com/view/lstXWS


//final fantasy 7, glockenspiel and harp, with echo
//[f]frequency [t]time
float instrument(float f, float t ){f*=t;
 float y=.7*sin(   pi2*f)*exp(-.0075*f);
      y+=.2*sin(2.*pi2*f)*exp(-.0055*f);return y*sat(t/.004);}
float instrument2(float f,float t){    
 float p=.2+0.8*max(0.,6.-.01*f);f*=t;
 p*=sin(pi2*f)*exp(-f*0.2);
 float y=.70*sin(     pi2*f+p)*exp(-.005*f);
      y+=.20*sin(2.01*pi2*f+p)*exp(-.0055*f);
      y+=.16*sin(4.01*pi2*f+p)*exp(-.009*f);
 return y*sat(t/.004);}
//https://www.shadertoy.com/view/XllXWN



#define trunc(a) float(int(a))
float notetrunc(float t){return trunc(sin(0.25*t)*4.+cos(0.375*t)*4.0);}
//https://www.shadertoy.com/view/4sXSWf

//smooth abs() ==??
float sAbs1(float x,float k){return sqrt(x*x+k);}
//nice smin?
float sMin(float a, float b, float k){
 return (a+b-sAbs1(a-b,k))*.5;}
//as usual, max() =-min(-,-)
float sMax(float a, float b, float k){return -sMin(-a, -b, k); }
//identity of SMOOTH clamp
float sClamp(float x, float a, float b, float k){
    return sMin(b,sMax(a,x,k),k);}
//smooth clamped sine instrument
float sndsmoothclampedsin(float time){
  return sClamp(pow(sin(6.2831*440.0*fract(time*.94)),64.),-.25,.55,.04);
}


/*
{
    //above this code n is set within a loop.
    //soothing harry potter sine
    //...  //https://www.shadertoy.com/view/lssXWS
    // calc frequency and time for note	  
    float noteFreq = 440.0*pow( 2.0, (n-69.0)/12.0 );
    float noteTime = 0.18*(t-x);
    // compute instrument	
    float y  = 0.5*sin(6.2831*1.00*noteFreq*noteTime)*exp(-0.0015*1.0*noteFreq*noteTime);
	      y += 0.3*sin(6.2831*2.01*noteFreq*noteTime)*exp(-0.0015*2.0*noteFreq*noteTime);
	      y += 0.2*sin(6.2831*4.01*noteFreq*noteTime)*exp(-0.0015*4.0*noteFreq*noteTime);
          y += 0.1*y*y*y;	  
          y *= 0.9 + 0.1*cos(40.0*noteTime);
	      y *= smoothstep(0.0,0.01,noteTime); 
    // accumulate echo	  
    tot += y * vec2(0.5+0.2*h,0.5-0.2*h) * (1.0-sqrt(h)*0.85);
      ///... tot is an accumulator for echo outside of a loop
}*/

float hash(float x){return fract(sin(x)*265871.1723);}
float noize(float t){return fract(sin(t*3314.9)*342.0);}
float rand21(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}
float n2f(float note){return 55.0   *pow(2.0,(note- 3.0)/12.);}
float noteMIDI(float n){return 440.0*pow(2.0,(n   -69.0)/12.);}


#define beatLength 1.
float noteFreq(int note){return n2f(float(note+39));}
float introHorn(int note, float time){    
 float g = time - 0.5;
 g=mix(pow(1.0-g,1.0-g*0.4),(1.0-g),step(0.,g));
 float b=6.2831*noteFreq(note)*g*0.5;
 float m=0.0;
 m+=sin(b*1.)*1.;
 m+=sin(b*2.)*.75;
 m+=sin(b*3.)*.75;
 m+=sin(b*4.)*.5;
 m+=sin(b*5.)*.75;
 m+=sin(b*6.)*.5;
 return m*=0.25;//overtones
}//earthbound mother2 battle horn   https://www.shadertoy.com/view/MljGRd
//cos+seesaw mix "earthbound kraken"
//[n]notePitch [t]time [o]octave [s]SawTwiddleFactor
float krakenSynth(int n,float t,float o,float s){
 float b=noteFreq(n),m=b*pow2(o-3.-s),q=b*pow2(o+2.);
 m=1.0-mod(t*m,1.0);m=pow(m,8.);//saw wave
 return m*cos(6.2831*t*q)-m;}//mixed with cos wave 
float krakenLead(float t){
 float n=t/beatLength,
 s=mod(floor(n),32.),b=floor(n/32.);
 if(fract(n)<.68){
  float u=floor(s/3.),w=mod(s,3.);
  if(s>=16.){t=5.-floor((s-16.)/3.);w=mod(s-16.,3.);}if(s>=29.)w++;
  float o=-u;if(w==2.)o++;
  int c=3;   if((b>0.)&&(mod(b,2.)==0.))c+=4;
  return krakenSynth(c,mod(t,beatLength),o,-u);
 }return 0.;}
//low pitch ship horn, with shitty envelope
float bassSynth(int n,float t){const float l=.5;
 if(t>l)return 0.;
 float b=6.2831*t*noteFreq(n);
 float i=1.-pow(1.-(t/l),32.);//shitty envelope in
 i*=1.-pow(t/l,8.);//shitty envelope out
 return(sin(b*pow2(-6.0))*1.5
       +sin(b*pow2(-5.0))*.5
       +sin(b*pow2(-4.0))*.05)*i;}
//https://www.shadertoy.com/view/MljGRd
//wailing whale syren.
float wailSynth(int n, float t){
 const float a = 4.0;//start time
 const float e = 32.0;//end time
 float f = max(0.,min(1.0,(t-a)/(e-a)));
 float i=pow(f,2.0);//shitty envelope in
 i*=1.0-(pow(f,2.0));//shitty envelope out
 float b = 6.2831*t*noteFreq(n)*0.25;
 b+=sin(t*4.5)*3.0;
 return(sin(b)
       +sin(b*3.)
       +sin(b*4.)*.75)*i;}//https://www.shadertoy.com/view/MljGRd
float krakenWail(float t){float b=t/beatLength;
 int n=(mod(floor(b/32.0),2.0)==0.)?2:3;
 return wailSynth(n,mod(b,32.0));}
vec2 mainSoundEarthBoundBattle(float t){ 
 return vec2(introHorn(0,t));
 return vec2(krakenWail(t));//return vec2(wailSynth(0,t));
 return vec2(bassSynth(60,t));
 return vec2(krakenLead(t));
}

//https://www.shadertoy.com/view/Xtl3DB
//buzz electric, with doppler erffect
float ssaw(float t){return 4.0*(abs(fract(t+0.75)-0.5)-0.25);}
float snd(float time){
	float a1=ssaw(50.0*time);
	a1=sign(a1)*pow(abs(a1),1.1+sin(time*20.0));	return a1;}
#define SPEEDOFSOUND 20.0
#define DAMPING 1.0
float phys(float time, float dist){
	float tim=time-dist/SPEEDOFSOUND;
	return snd(tim)*exp(-dist*DAMPING);}
vec2 rep(vec2 p, vec2 a){return abs(mod(p+a,a*2.0)-a);}
float DEL(in vec3 z0){z0.xz=rep(z0.xz,vec2(7.0,6.0));
	z0=abs(z0)-vec3(2.74,0.83,2.74);
	return length(z0+vec3(-0.82,0.0,-1.0));}
vec3 herert(vec3 fw,vec3 up){fw=normalize(fw);return normalize(cross(fw,normalize(up)));}
vec2 mainSound2(float time){
	float tim=time*0.25;
	vec3 ro=vec3(sin(tim)*(2.0+tim)-4.0,0.5,cos(tim)-4.0);
	vec3 rt=0.1*herert(vec3(-4.0,-0.6,-4.0)-ro,vec3(0.0,1.0,0.0));
	float d1=DEL(ro),d2=DEL(ro+rt);
	float a1=phys(time,d1),a2=phys(time,d2);
	return vec2(a1,a2);}


//bubble noise  //n += note(C4, m, 0.0, 2.0, time);
float noteBubble(float hz, int type, float s, float d, float t) {
    float f=0.4;
    s *= f;
    d *= f;
    if(t >= s && t <= s+d) {
        t -= s;
        float rt = t;
		t *= CON;
    	if(type == 1) {
            rt = pow(rt+1.0,10.0);
            if(rt < 1.0) {
                rt = 1.0;
            }
    		return (sin(t*hz)/rt);
        } else if(type == 2) {
            float n = sin(t*hz);
            n *= fract(rt*hz);
            return n;
        } else if(type == 3) {
            t += sin(t*5.0)*0.005;
            float n = sin(t*hz);
            return n;
        } else if(type == 4) {
            t *= rt*4.0+0.5;
        	float n = sin(t*hz);
            rt = pow(rt*4.0+0.5,20.0);
            if(rt < 1.0) {
                rt = 1.0;
            }
            return n/rt;
        }}}//https://www.shadertoy.com/view/XdScDy


// base piano
vec2 Instr1(float de,float time){
	float f0=440.0*de*0.001953125;
  	float f1=440.0*de*0.001953125;
  	float f2=440.0*de*0.001953125;
  	float a=sin(2.0*f0*pi*time);
    float b=sin(4.0*f0*pi*time)*0.08;
    float c=sin(8.0*f0*pi*time)*0.04;
    float d=sin(16.0*f0*pi*time)*0.002;
    float e=sin(32.0*f0*pi*time)*0.001;
    float f=sin(f0*pi*time)*0.02;
  	return vec2((a+b+c+e+f)*0.5*exp(-1.0*time));}
// bass
vec2 Instr2(float de,float time){
	float x=pi*time*2.0;
	float f0=de*110.0*0.015625;
    float f1=0.2;
  	float f2=0.25;
  	float a=sin(2.0*f0*pi*time);
  	float c=f1*time+f2*a;
  	float b=sin(a*c*2.0*pi);
  	return vec2((b)*0.9*exp(-0.3*time)*exp(-0.3*time)*exp(-0.1*time));}
// light piano
vec2 Instr3(float de,float time){
	float f0=440.0*de*0.001953125;
  	float f1=440.0*de*0.001953125;
  	float f2=440.0*de*0.001953125;
  	float a=sin(2.0*f0*pi*time);
    float b=sin(4.0*f0*pi*time)*0.08;
    float c=sin(8.0*f0*pi*time)*0.04;
    float d=sin(16.0*f0*pi*time)*0.002;
    float e=sin(32.0*f0*pi*time)*0.001;
    float f=sin(f0*pi*time)*0.02;
  	return vec2((a+b+c+e+f)*0.5*exp(-0.6*time)*exp(-1.0*time));}
//https://www.shadertoy.com/view/llsSDf



float collisSound(float starttime,float time){ // ball vs ball collision sound
    float stime = time-starttime;
    return clamp(sin(stime*(0.18-stime)*10000.0)*exp(stime*-50.0)*3.0,-0.4,0.4);
}//https://www.shadertoy.com/view/MtSXR1


float instrumentBanjo( float freq, float time ){
    freq = 440.0*pow(freq/440.0,1.003); // spread
    float ph = 1.0;
    ph *= sin(6.2831*freq*time);
    ph *= 0.2+0.8*max(0.0,6.0-0.01*freq);
    ph *= exp(-time*freq*0.2);
    float y = 0.0;
    y += 0.70*sin(1.00*6.2831*freq*time+ph)*exp(-0.5*0.007*freq*time);
    y += 0.20*sin(2.01*6.2831*freq*time+ph)*exp(-0.5*0.011*freq*time);
    y += 0.20*sin(3.01*6.2831*freq*time+ph)*exp(-0.5*0.015*freq*time);
    y += 0.16*sin(4.01*6.2831*freq*time+ph)*exp(-0.5*0.018*freq*time);
    y += 0.13*sin(5.01*6.2831*freq*time+ph)*exp(-0.5*0.021*freq*time);
    y += 0.10*sin(6.01*6.2831*freq*time+ph)*exp(-0.5*0.027*freq*time);
    y += 0.09*sin(8.01*6.2831*freq*time+ph)*exp(-0.5*0.030*freq*time);
    y += 0.07*sin(9.01*6.2831*freq*time+ph)*exp(-0.5*0.033*freq*time);
    y += 0.45*y*y*y;       
    y *= 1.0 + 1.5*exp(-8.0*time);
    y *= clamp( time/0.004, 0.0, 1.0 );

    y *= 2.5-1.5*clamp( log2(freq)/10.0,0.0,1.0);
	return y;	
}//banjo (piratey) from https://www.shadertoy.com/view/ldXXDj
//return vec2(instrumentBanjo(440.,time));

//dr who bass (sans sequence)
vec2 bass(float time, float tt, float note){
    if (tt<0.0)
      return vec2(0.0);

    float freqTime = 6.2831*time*n2f(note);
    
    return vec2(( sin(     freqTime
                      +sin(freqTime)*7.0*exp(-2.0*tt)
                     )+
                  sin(     freqTime*2.0
                      +cos(freqTime*2.0)*1.0*sin(time*3.14)
                      +sin(freqTime*8.0)*0.25*sin(1.0+time*3.14)
                    )*exp(-2.0*tt)+
                  cos(     freqTime*4.0
                      +cos(freqTime*2.0)*3.0*sin(time*3.14+0.3)
                    )*exp(-2.0*tt)
                )*exp(-1.0*tt) );}
//https://www.shadertoy.com/view/4dSXRm

float note(float nr){//dr who themerin sequence
    if (nr<=15.)  return -120.;
    if (nr<=16.)  return 31.;
    if (nr<=17.)  return 56.;
    if (nr<=22.)  return 55.;
    if (nr<=23.)  return -120.;
    if (nr<=24.)  return 58.;
    if (nr<=25.)  return 42.;
    if (nr<=30.)  return 43.;
    if (nr<=33.)  return -120.;
    if (nr<=34.5)  return 43.;
    if (nr<=35.5)  return 39.;
    if (nr<=37.0)  return 31.;
    if (nr<=39.0)  return 34.;
    if (nr<=39.5)  return 32.;
    if (nr<=40.5)  return 31.;
    if (nr<=41.0)  return -120.;
    if (nr<=42.5)  return 31.;
    if (nr<=43.0)  return 44.;
    if (nr<=46.0)  return 43.;
    return -120.0;}
#define RES 0.02
float getSample(float time, float tt, float FM){
    tt -= mod(tt,RES);
    float note1 = note(tt);
    float note2 = note(tt+0.5);
    if (note1 <0.0)     return 0.0;    
    float stepper = smoothstep(0.1,0.5,mod(tt,0.5));
    float note = mix(note1,note2,stepper);    
    float angle = PI2*n2f(note)*time;
    return sin(angle+FM*sin(angle*2.033));}
vec2 theramin(float time, float tt){
    tt = mod(tt,48.0);
    tt += 1.33;
    float FM = 0.0;
    if (tt>=32.)
        FM = PI2/2.;
    float sampl;
    float ta = mod(tt-RES/2.0,RES)-RES/2.0;
    float halfSin = RES/4.0;//4.0/frequency;
    if (abs(ta)<halfSin)    {
        float sample1 = getSample(time,tt-RES/2.0,FM);
        float sample2 = getSample(time,tt+RES/2.0,FM);
        sampl = mix(sample1,sample2,smoothstep(-halfSin,halfSin,ta));
    }
    else
        sampl = getSample(time,tt,FM);
    
    return vec2( sampl);}////https://www.shadertoy.com/view/4dSXRm


float Sin(float x){return sin(x * 3.1415 * 2.0);}
//sin electric string
float Instrument( const in vec2 vFreqTime ){
    float f = vFreqTime.x;
    float t = vFreqTime.y;    
    if( t < 0.0 ) return 0.0;
    float x = 0.0;
    float a = 1.0;
    float h = 1.0;
    for(int i=0; i<4; i++){
        x += Sin( f * t * h ) * exp2( t * -a );
        x += Sin( f * (t+0.005) * h * 0.5 ) * exp2( t * -a * 2.0 ) ;
        h = h + 1.01;
        a = a * 2.0;
    }return x;}//return vec2(Instrument(vec2(440.,time)));
//https://www.shadertoy.com/view/MdsGzr




float res;//this one writes in a global mutable...
void explosionSound(float time){
    if (time<0.5 && time>0.0) { // explosion sound
        float freq = 1000.0 * (1.0-time*2.0);
        float freqintegrated = 1000.0 * (-time*time*1.0+time);
        res += noize(float(int(freqintegrated))) ;
//        res += fract(freqintegrated)>0.5 ? -0.2 : 0.2;
}}//https://www.shadertoy.com/view/4l2GzR


// Sine wave
//#define sine(freq, time) (sin(6.28318531*time*freq))
// Saw wave
//#define saw(freq, time) ((time*freq - floor(time*freq)) * 2.0 - 1.0)
// Square wave
//#define square(freq, time) (sign(sin(6.28318531*time*freq)))
// Triangle wave
//#define tri(freq, time) (1.0 - abs(mod(freq*time, 1.0)-2.0))
//https://www.shadertoy.com/view/Mt2GDz

float ntof(float n){if(n<12.0)return 0.0;return 440.0 * pow(2.0, (n - 67.0) / 12.0);}
float ssaw2(float t){return 4.0*abs(fract(t)-0.5)-1.0;}
float rnd(float t){return fract(sin(t*341.545234)*1531.2341);}
float srnd(float t){float t2=fract(t);return mix(rnd(floor(t)),rnd(floor(t+1.0)),t2*t2*(3.0-2.0*t2));}
//https://www.shadertoy.com/view/MlXGDn

float osc_noise(float p){p *= 20000.;float F = floor(p), f = fract(p);
 return mix(hash(F), hash(F+1.), f);}
float osc_sine(float p){return sin(p*pi2);}
float osc_saw(float p){return p*2.-1.;}
float osc_square(float p,float x){return -1.+2.*step(x,p);}
float osc_sinefm(float pc, float pm, float b){return sin(pc*pi2+b*sin(pm*pi2));}
float osc_tri(float p, float x){
 float a = smoothstep(0., x, p), b = smoothstep(1., x, p);
 return (a * b) * 2. - 1.;}
////https://www.shadertoy.com/view/MlfGRM



//integer modulo
int imod(int x, int y){return x - (x / y) * y;}

//bitwise square wave
const int seq1[] = int[](66,89,125,54,89,66,54,37);
const int seq2[] = int[](81,106,125,54,106,81,54,37);
int g(int i,int x,int t,int o){
    return((3&x&(i*(((3&i>>16)!=0?seq1[t%8]:seq2[t%8])+51)>>o))<<4);
}//https://www.shadertoy.com/view/4dlyWl


#define BPM 112.
//same idea but with an AR envelope
float seqAR(float t, float gate, float atk, float rel, float ofst){
    float p = ((t*PI*BPM/120.)-ofst*TAU-PI*0.5+gate );
    float tp = fract(p/PI*.5);
    
    //The envelopes have to be scaled based on the gate length
    gate = clamp(gate,-1.,1.);
    float scl = (1.-abs(gate));
    atk *= scl;
    rel *= scl;
    //Attack envelope
	if (tp > 0.5) return smoothstep( gate-atk, gate+atk, cos(p));
    //Release envelope
	return smoothstep( gate-rel, gate+rel, cos(p));}
//Basic waveforms with note and octave input
float sn(float t, float note, float octave){
	return sin(t*note*exp2(octave)*PI);}
float saw(float t, float note, float octave){
	return fract(t*note*exp2(octave-1.))-0.5;}
float tri(float t, float note, float octave){
	return (abs(fract(t*note*exp2(octave-1.))-0.5)*2.-0.5)*2.;}
float sqr(float t, float note, float octave){
	return step(fract(t*note*exp2(octave-1.)), 0.5)-0.5;}
//simple frequency modulation (3->1)
float fmsq(float t, float note, float octave){
	float fm = sn(t,note,octave-1.)*0.0008;
	float fm2 = sn(t,note,octave+1.)*0.0007;
	float fm3 = sn(t,note,octave+2.)*0.00055;
	return sqr(t+fm+fm2+fm3,note,octave);}
//very fake filtered saw (not used)
float filterSaw(float t, float note, float octave, float cutoff, float q){
    float saw = fract(t*note*exp2(octave-1.))-0.5;
    float sn = cos((t*note*exp2(octave)*PI)+PI*0.5);
    float filt = smoothstep(cutoff-q,cutoff+q,abs(saw)*2.);
    return mix(saw,sn,filt);}
//a slightly more complex intrument using the sequencer for harmonic envelopes
//freq is how often the note is triggered
float additive(float t, float note, float octave, float freq){
    float x = t*freq;
    float rz = 0.;
    float atk = 0.01;
    float rel = 1.;
    float h = 1.;
    float pw = 1.;
    float dcy = .0;    
    for(int i=0;i<6;i++)    {
        rz += sn(t*h, note, octave)*seqAR(x, dcy ,atk, rel, 0.)*pw;
        dcy += .1;
        pw  -= .1;
        h = float(i)+1.001;
    }
    rz = saw(rz*0.002,note,octave)*seqAR(x, .0 ,atk, rel, 0.);
    return rz;}//https://www.shadertoy.com/view/MdfXW2


// regular sine
float wave0(float x){return sin(pi2*x);}
// half sine + pause
float wave1(float x){return max(sin(x*pi2),0.0);}
// half sine, double frequency
float wave2(float x){return abs(sin(x*pi2));}
// quarter sine + pause, double frequency
float wave3(float x) {return abs(sin(x*pi2))*step(fract(x*2.0),0.5);}
// sine + pause, double frequency
float wave4(float x){return sin(x*pi2*2.0)*step(fract(x),0.5);}
// half sine + pause, double frequency
float wave5(float x) {return abs(sin(x*pi2*2.0))*step(fract(x),0.5);}
// square wave
float wave6(float x) {return step(fract(x),0.5)*2.0-1.0;}
// saw wave
float wave7(float x) {return 1.0 - 2.0*fract(x);}
// normalizes arguments so the sum is 1
vec4 normsum(vec4 p) {return p / (p.x+p.y+p.z+p.w);}
//https://www.shadertoy.com/view/ll23RK
// v = vec4(attack,decay,hold,release), s = sustain amplitude
float adsr(float t, vec4 v, float s) {
    v.xyw = max(vec3(2.2e-05),v.xyw);
    // attack term
    float ta = t/v.x;
    // decay / sustain amplitude term
    float td = max(s, 1.0-(t-v.x)*(1.0-s)/v.y);
    // length / release term
    float tr = (1.0 - max(0.0,t-(v.x+v.y+v.z))/v.w);
    return max(0.0, min(ta, tr*td));
}//https://www.shadertoy.com/view/ll23RK

#define C 1046.50
#define D 1174.66
#define E 1318.51
#define F 1396.91
#define G 1567.98
#define A 1760.00
#define B 1975.53
#define C2 2093.00
float[] notes = float[](C, D, E, F, G, A, B, C2); 
float note(int idx, int octave, float amp, float t) {
	return amp*sin(exp2(float(octave))*notes[idx%8]*mod(t,2.0)*6.28318*0.2);   
}//https://www.shadertoy.com/view/ldXBzH
float noteSaw(int idx, int octave, float amp, float t) {
	return amp*tan(sin(exp2(float(octave))*notes[idx%8]*mod(t,2.0)*6.28318*0.2));   
}//https://www.shadertoy.com/view/ldXBzH
float noteSquare(int idx, int octave, float amp, float t) {
	return 3.0*amp*pow(fract(exp2(float(octave))*notes[idx%8]*floor(mod(4.0*t,2.0)+1.0)*mod(t,2.0)*0.05)-0.5,1.0);   
}//https://www.shadertoy.com/view/ldXBzH


float rand(float t){
    return fract(sin(t*1793.326) * 43758.5453);
}//https://www.shadertoy.com/view/XscXzn
//hihat
//f+=rand(time)*0.5*pow(1.0-t2,16.0);*/

#define TT(d) mod(mod(time,1.0)-d,1.0)
//https://www.shadertoy.com/view/XscXzn

//electric base guitar, electric shaver
float bs(float time,int note){
    float baseFreq=1.0;
    
    int globalTranspose=0;
    note+=globalTranspose;
    
    float base_a4=110.0;
    float freq=base_a4*pow(2.0,float(note)/12.0)*baseFreq;
    
    float t=1.0-(time*1.0);
    t=max(t,0.0);
	
    //float PI=3.141592;
    //create sqr duty wave
    float duty=cos(time*4.0)/PI;
    duty=duty*0.5+0.5;
    float f1=fract(t*freq);
    float f2=fract(duty+t*freq);
    float f=f1-f2;
    f= clamp(f,-1.0,1.0);
    
	float t2=time*baseFreq;
    f*=pow(max(0.0,1.0-(t2*2.0)),3.0);

    return f;
}//https://www.shadertoy.com/view/XscXzn

int globalTranspose=0;
float baseFreq=1.0;
float globalTime=0.0;
//float PI=3.141592;
float speed=1.2;

//precision instrument elemet.
float ws(float x,float a){
	return x*(abs(x) + a)/(x*x + (a-1.0)*abs(x) + 1.0);
}//https://www.shadertoy.com/view/XscXzn

//snare drum (high pitch)
float sn(float _time){
    float freq=680.0*baseFreq;
	float c=0.0;
    const int  num=11;
    for (int i=0;i<num;i++)
    {
        float time=_time-float(i)*(0.09+float(i)*0.01);

        if (time<0.0) continue;
        float t=1.0-(time*1.0);
        t=max(t,0.0);
        t=pow(t,2.0);
        float f=sin(t*freq)/PI;
    	f=ws(f,2.9);
        t=time*baseFreq;
        f*=pow(max(0.0,1.0-(t*6.0)),4.0);
        f+=rand(time)*0.4*pow(1.0-t,20.0);
    	f=ws(f,1.9);
	    f= clamp(f,-1.0,1.0);
        f*=0.7;
        c+=f/float(1+(i*i*4));
    }
    
    return c*0.35;        
}//https://www.shadertoy.com/view/XscXzn

float bd(float time){
    float freq=100.0*baseFreq;
    float vol=0.4;
    float depth=4.0;

    float t=1.0-(time*4.0);
    t=max(t,0.0);
    t=pow(t,depth);
    float f=cos(t*freq)/PI;
    
    float t2=time*baseFreq;
    
    f*=pow(1.0-t2,8.0);
//    f=ws(f,2.0);
    f+=rand(time)*pow(1.0-t2,1464.0)*0.5;

    return clamp(f*vol,-1.0,1.0);
}//https://www.shadertoy.com/view/XscXzn

float drums(float t)
{
    float c=0.0;

    float n = 0.0, b = 0.0, x = 0.0;
    #define BD(d)   c+=bd(TT(d));
    #define SN(d)   c+=sn(TT(d));
	
    float time=mod(t,4.0);

    if (time<1.0)
    {
        BD(0.0);
        SN(0.5);
        BD(0.75);
    }
	else
    if (time<2.0)
    {
        BD(0.0);
        SN(0.5);
    }
	else
    if (time<3.0)
    {
        BD(0.0);
        SN(0.5);
        BD(0.75);
    }
    else
    if (time<4.0)
    {
        BD(0.0);
        SN(0.25);
        SN(0.5);
        SN(0.75);
    }    
    return c;
}//https://www.shadertoy.com/view/XscXzn

//looks like square wave, 3 voices and echo
float ap(float _time,int note[3],float speed,float delay){
    note[0]+=globalTranspose;
    note[1]+=globalTranspose;
    note[2]+=globalTranspose;
    float base_a4=440.0;
    float c=0.0;
    for (int i=0;i<3;i++){//loop for echo
        float time=_time+float(i)*delay;
        float freq=base_a4*pow(2.0,float(note[i])/12.0)*baseFreq;
        freq*=speed;

        //vibrato
        float vibratoDelay=0.1;
        freq+=1.0+sin(time*20.0*speed)/PI*0.0005*freq*step(0.0,time-vibratoDelay);

        float t=1.0-(time*1.0);
        t=max(t,0.0);

        //create sqr duty wave
        float duty=cos(time*5.0)/PI;
        float f1=fract(t*freq);
        float f2=fract(duty+t*freq);
        float f=f1-f2;
        f= clamp(f,-1.0,1.0);

        float t2=time*baseFreq;
        f*=pow(max(0.0,1.0-(t2*1.0)),1.5);
        
        c+=f;
    }return c;}//https://www.shadertoy.com/view/XscXzn

float arp(float t){
    float c=0.0;
    float speed=4.0;
    float delay=-0.4;

    #define ARP(d,n)   c+=ap(TT(d),n,1.0/speed,delay);
    	
    float time=mod(t*speed,4.0*speed);
	
    float  g=time/speed;
    int i[3];
    if (g<1.0)
	    {i[0]=0;i[1]=3;i[2]=7;ARP(0.0,i);}
	else if (g<2.0)
    	{int a=-2;i[0]=0+a;i[1]=4+a;i[2]=7+a;ARP(0.0,i);}
	else if (g<3.0)
    	{int a=-4;i[0]=0+a;i[1]=4+a;i[2]=7+a;ARP(0.0,i);}
	else if (g<4.0)
    	{int a=-4;i[0]=0+a;i[1]=4+a;i[2]=7+a;ARP(0.0,i);}

    return c*0.4;}//https://www.shadertoy.com/view/XscXzn

//sine wave with vibrato, nice lead (background).
float ld(float time,int note,float speed,float arpVolume){
    note+=globalTranspose;    
    float base_a4=440.0;
    float freq=base_a4*pow(2.0,float(note)/12.0)*baseFreq;
    freq*=speed;    
    freq+=freq*step(mod(time,0.1),0.05)*arpVolume;
	
    //vibrato
    float vibratoDelay=0.2;
    freq+=1.0+sin(time*20.0*speed)/PI*0.001*freq*step(0.0,time-vibratoDelay);

    float t=1.0-(time*1.0);
    t=max(t,0.0);
	
    //create sqr duty wave
    float duty=cos(time*2.0+globalTime*0.5)/PI;
    duty=duty*0.2+0.8;
    float f1=fract(t*freq);
    float f2=fract(duty+t*freq);
    float f=f1-f2;
    f= clamp(f,-1.0,1.0);
    
	float t2=time*baseFreq;
    f*=pow(max(0.0,1.0-(t2*1.0)),1.5);

    //hihat
    //f+=rand(time)*0.2*pow(1.0-t2,16.0);
    return f;}

float lead(float t,float arpVolume){
    float c=0.0;
    float speed=0.5;

    #define LD(d,n)   c+=ld(TT(d),n,1.0/speed,arpVolume)*step(0.0,time-d);
   
    float time=mod(t*speed,32.0);
    if (time>8.0 && time<16.0)time-=8.0;

    int i=0;
    float f=0.0;
    if (time<1.0)
    {
        LD(0.0,i);
        LD(0.5,i+2);
	}
	else
    if (time<2.0)
    {
		time=fract(time);
        LD(0.0,i+3);
        LD(0.125*1.0,i+5);
        LD(0.125*3.0,i);
        LD(0.125*5.0,i-2);
	}
	else
    if (time<3.0)
    {
		time=fract(time);
        LD(0.0,i);
        LD(0.5,i+2);
    }
    else
    if (time<4.0)
    {
		time=fract(time);
        LD(0.0,i+3);
        LD(0.125*1.0,i+5);
        LD(0.125*3.0,i+10);
        LD(0.125*5.0,i+7);
    }
    else
    if (time<5.0)
    {
		time=fract(time);
        LD(0.0,i);
        LD(0.5,i+2);
	}
	else
    if (time<6.0)
    {
		time=fract(time);
        LD(0.0,i+3);
        LD(0.125*1.0,i+5);
        LD(0.125*3.0,i);
        LD(0.125*5.0,i-2);
	}
	else
    if (time<7.0)
    {
		time=fract(time);
        LD(0.0,i);
        LD(0.5,i-2);
    }
    else
    if (time<8.0)
    {
		time=fract(time);
        i=-12;
        LD(0.0,i+7);
        LD(0.125*1.0,i+10);
        LD(0.125*2.0,i+5);
        LD(0.125*3.0,i+7);
    }
    return c;
}


//Simple mixing function with balance control  (balance range 0..1)
vec2 mixb(float x, float bal){bal = clamp(bal,0.,1.);
 return vec2(x * bal, x*(1.-bal));}
//https://www.shadertoy.com/view/MdfXW2


//looks like envelopes
float env_ar(float t, float a, float r){return smoothstep(0.,a,t)*smoothstep(r,0.,t-a);}
float env_asr(float t, float ts, float a, float r) {
    return smoothstep(0.,a,t)*smoothstep(r,0.,t-a-ts);}
//https://www.shadertoy.com/view/MlfGRM


// A hacky linear decay
float decay(float seqTime, float start, float length, float amount){
    return 1.0 - clamp((seqTime - start) / length, 0.0, amount);}
//https://www.shadertoy.com/view/Mt2GDz

// Pans the given instrument by a certain amount
// Set amount to -1.0 for left-panning, set to 0.0 for center, set to 1.0 for right-panning
vec2 pan(float inst, float amount){
    amount = (amount + 1.0) / 2.0;
    return vec2(inst * (1.0 - amount), inst * amount);}
//https://www.shadertoy.com/view/Mt2GDz


vec2 mainSound( in int samp, float t )
{
     t=mod(t,32.);
    return .2*vec2(lead(t,.0));
    return .2*vec2( sin(6.2831*440.0*t)*.1 );
}